// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var $$Set = require("bs-platform/lib/js/set.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var compare = Caml_obj.caml_compare;

var ProductList = /* module */[/* compare */compare];

var Products = $$Set.Make(ProductList);

function addToCart(c, i) {
  if (typeof c === "number") {
    return /* ActiveCart */Block.__(0, [Curry._2(Products[/* add */3], i, Products[/* empty */0])]);
  } else if (c.tag) {
    return c;
  } else {
    return /* ActiveCart */Block.__(0, [Curry._2(Products[/* add */3], i, c[0])]);
  }
}

function equal(a, b) {
  if (typeof a === "number") {
    if (typeof b === "number") {
      return true;
    } else {
      return false;
    }
  } else if (a.tag) {
    if (typeof b === "number" || !(b.tag && a[1] === b[1])) {
      return false;
    } else {
      return Curry._2(Products[/* equal */10], a[0], b[0]);
    }
  } else if (typeof b === "number" || b.tag) {
    return false;
  } else {
    return Curry._2(Products[/* equal */10], a[0], b[0]);
  }
}

function axioms(add, a, b) {
  if (!equal(/* Empty */0, /* Empty */0)) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "DDD.re",
            36,
            2
          ]
        ];
  }
  if (!equal(Curry._2(add, /* Empty */0, a), Curry._2(add, /* Empty */0, a))) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "DDD.re",
            38,
            2
          ]
        ];
  }
  if (equal(Curry._2(add, /* Empty */0, a), Curry._2(add, /* Empty */0, b))) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "DDD.re",
            40,
            2
          ]
        ];
  }
  if (!equal(Curry._2(add, Curry._2(add, /* Empty */0, a), a), Curry._2(add, /* Empty */0, a))) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "DDD.re",
            42,
            2
          ]
        ];
  }
  if (equal(Curry._2(add, Curry._2(add, /* Empty */0, a), b), Curry._2(add, Curry._2(add, /* Empty */0, b), a))) {
    return 0;
  } else {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "DDD.re",
            44,
            2
          ]
        ];
  }
}

axioms(addToCart, "iPhone", "Mac");

exports.ProductList = ProductList;
exports.Products = Products;
exports.addToCart = addToCart;
exports.equal = equal;
exports.axioms = axioms;
/* Products Not a pure module */
