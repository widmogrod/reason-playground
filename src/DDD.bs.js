// Generated by BUCKLESCRIPT VERSION 4.0.7, PLEASE EDIT WITH CARE
'use strict';

var $$Set = require("bs-platform/lib/js/set.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var compare = Caml_obj.caml_compare;

var ProductList = /* module */[/* compare */compare];

var Products = $$Set.Make(ProductList);

function addToCart(c, i) {
  if (typeof c === "number") {
    return /* ActiveCart */Block.__(0, [Curry._2(Products[/* add */3], i, Products[/* empty */0])]);
  } else if (c.tag) {
    return c;
  } else {
    return /* ActiveCart */Block.__(0, [Curry._2(Products[/* add */3], i, c[0])]);
  }
}

function axioms(add, a, b, c) {
  if (!Caml_obj.caml_equal(/* Empty */0, /* Empty */0)) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "DDD.re",
            26,
            2
          ]
        ];
  }
  if (!Caml_obj.caml_equal(Curry._2(add, /* Empty */0, a), Curry._2(add, /* Empty */0, a))) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "DDD.re",
            27,
            2
          ]
        ];
  }
  if (Caml_obj.caml_equal(Curry._2(add, Curry._2(add, /* Empty */0, a), a), Curry._2(add, /* Empty */0, a))) {
    return 0;
  } else {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "DDD.re",
            28,
            2
          ]
        ];
  }
}

axioms(addToCart, "iPhone XR", "iPad", "Mac");

exports.ProductList = ProductList;
exports.Products = Products;
exports.addToCart = addToCart;
exports.axioms = axioms;
/* Products Not a pure module */
